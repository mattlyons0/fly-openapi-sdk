# coding: utf-8

"""
    Machines API

    # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fly_sdk.models.update_machine_request import UpdateMachineRequest

class TestUpdateMachineRequest(unittest.TestCase):
    """UpdateMachineRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateMachineRequest:
        """Test UpdateMachineRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateMachineRequest`
        """
        model = UpdateMachineRequest()
        if include_optional:
            return UpdateMachineRequest(
                config = fly_sdk.models.api/machine_config.api.MachineConfig(
                    auto_destroy = True, 
                    checks = {
                        'key' : fly_sdk.models.api/machine_check.api.MachineCheck(
                            grace_period = '', 
                            headers = [
                                fly_sdk.models.api/machine_http_header.api.MachineHTTPHeader(
                                    name = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            interval = '', 
                            method = '', 
                            path = '', 
                            port = 56, 
                            protocol = '', 
                            timeout = '', 
                            tls_server_name = '', 
                            tls_skip_verify = True, 
                            type = '', )
                        }, 
                    disable_machine_autostart = True, 
                    dns = fly_sdk.models.api/dns_config.api.DNSConfig(
                        nameservers = [
                            ''
                            ], 
                        options = [
                            fly_sdk.models.api/dns_option.api.dnsOption(
                                name = '', 
                                value = '', )
                            ], 
                        searches = [
                            ''
                            ], 
                        skip_registration = True, ), 
                    env = {
                        'key' : ''
                        }, 
                    files = [
                        fly_sdk.models.api/file.api.File(
                            guest_path = '', 
                            raw_value = '', 
                            secret_name = '', )
                        ], 
                    guest = fly_sdk.models.api/machine_guest.api.MachineGuest(
                        cpu_kind = '', 
                        cpus = 56, 
                        gpu_kind = '', 
                        gpus = 56, 
                        host_dedication_id = '', 
                        kernel_args = [
                            ''
                            ], 
                        memory_mb = 56, ), 
                    image = '', 
                    init = fly_sdk.models.api/machine_init.api.MachineInit(
                        cmd = [
                            ''
                            ], 
                        entrypoint = [
                            ''
                            ], 
                        exec = [
                            ''
                            ], 
                        swap_size_mb = 56, 
                        tty = True, ), 
                    metadata = {
                        'key' : ''
                        }, 
                    metrics = fly_sdk.models.api/machine_metrics.api.MachineMetrics(
                        path = '', 
                        port = 56, ), 
                    mounts = [
                        fly_sdk.models.api/machine_mount.api.MachineMount(
                            add_size_gb = 56, 
                            encrypted = True, 
                            extend_threshold_percent = 56, 
                            name = '', 
                            path = '', 
                            size_gb = 56, 
                            size_gb_limit = 56, 
                            volume = '', )
                        ], 
                    processes = [
                        fly_sdk.models.api/machine_process.api.MachineProcess(
                            user = '', )
                        ], 
                    restart = fly_sdk.models.api/machine_restart.api.MachineRestart(
                        max_retries = 56, 
                        policy = 'no', ), 
                    schedule = '', 
                    services = [
                        fly_sdk.models.api/machine_service.api.MachineService(
                            autostart = True, 
                            autostop = True, 
                            concurrency = fly_sdk.models.api/machine_service_concurrency.api.MachineServiceConcurrency(
                                hard_limit = 56, 
                                soft_limit = 56, 
                                type = '', ), 
                            force_instance_description = '', 
                            force_instance_key = '', 
                            internal_port = 56, 
                            min_machines_running = 56, 
                            ports = [
                                fly_sdk.models.api/machine_port.api.MachinePort(
                                    end_port = 56, 
                                    force_https = True, 
                                    handlers = [
                                        ''
                                        ], 
                                    http_options = fly_sdk.models.api/http_options.api.HTTPOptions(
                                        compress = True, 
                                        h2_backend = True, 
                                        response = fly_sdk.models.api/http_response_options.api.HTTPResponseOptions(), ), 
                                    port = 56, 
                                    proxy_proto_options = fly_sdk.models.api/proxy_proto_options.api.ProxyProtoOptions(
                                        version = '', ), 
                                    start_port = 56, 
                                    tls_options = fly_sdk.models.api/tls_options.api.TLSOptions(
                                        alpn = [
                                            ''
                                            ], 
                                        default_self_signed = True, 
                                        versions = [
                                            ''
                                            ], ), )
                                ], 
                            protocol = '', )
                        ], 
                    size = '', 
                    standbys = [
                        ''
                        ], 
                    statics = [
                        fly_sdk.models.api/static.api.Static(
                            guest_path = '', 
                            tigris_bucket = '', 
                            url_prefix = '', )
                        ], 
                    stop_config = fly_sdk.models.api/stop_config.api.StopConfig(
                        signal = '', 
                        timeout = '', ), ),
                current_version = '',
                lease_ttl = 56,
                lsvd = True,
                name = '',
                region = '',
                skip_launch = True,
                skip_service_registration = True
            )
        else:
            return UpdateMachineRequest(
        )
        """

    def testUpdateMachineRequest(self):
        """Test UpdateMachineRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
