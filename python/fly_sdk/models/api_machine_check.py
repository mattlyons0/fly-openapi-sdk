# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from fly_sdk.models.api_machine_http_header import ApiMachineHTTPHeader
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApiMachineCheck(BaseModel):
    """
    An optional object that defines one or more named checks. The key for each check is the check name.
    """ # noqa: E501
    grace_period: Optional[StrictStr] = Field(default=None, description="The time to wait after a VM starts before checking its health")
    headers: Optional[List[ApiMachineHTTPHeader]] = None
    interval: Optional[StrictStr] = Field(default=None, description="The time between connectivity checks")
    method: Optional[StrictStr] = Field(default=None, description="For http checks, the HTTP method to use to when making the request")
    path: Optional[StrictStr] = Field(default=None, description="For http checks, the path to send the request to")
    port: Optional[StrictInt] = Field(default=None, description="The port to connect to, often the same as internal_port")
    protocol: Optional[StrictStr] = Field(default=None, description="For http checks, whether to use http or https")
    timeout: Optional[StrictStr] = Field(default=None, description="The maximum time a connection can take before being reported as failing its health check")
    tls_server_name: Optional[StrictStr] = Field(default=None, description="If the protocol is https, the hostname to use for TLS certificate validation")
    tls_skip_verify: Optional[StrictBool] = Field(default=None, description="For http checks with https protocol, whether or not to verify the TLS certificate")
    type: Optional[StrictStr] = Field(default=None, description="tcp or http")
    __properties: ClassVar[List[str]] = ["grace_period", "headers", "interval", "method", "path", "port", "protocol", "timeout", "tls_server_name", "tls_skip_verify", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApiMachineCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item in self.headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApiMachineCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grace_period": obj.get("grace_period"),
            "headers": [ApiMachineHTTPHeader.from_dict(_item) for _item in obj.get("headers")] if obj.get("headers") is not None else None,
            "interval": obj.get("interval"),
            "method": obj.get("method"),
            "path": obj.get("path"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "timeout": obj.get("timeout"),
            "tls_server_name": obj.get("tls_server_name"),
            "tls_skip_verify": obj.get("tls_skip_verify"),
            "type": obj.get("type")
        })
        return _obj


