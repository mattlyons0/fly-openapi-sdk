# coding: utf-8

"""
    Machines API

    # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once you’re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fly_sdk.models.api_dns_config import ApiDNSConfig
from fly_sdk.models.api_file import ApiFile
from fly_sdk.models.api_machine_check import ApiMachineCheck
from fly_sdk.models.api_machine_guest import ApiMachineGuest
from fly_sdk.models.api_machine_init import ApiMachineInit
from fly_sdk.models.api_machine_metrics import ApiMachineMetrics
from fly_sdk.models.api_machine_mount import ApiMachineMount
from fly_sdk.models.api_machine_process import ApiMachineProcess
from fly_sdk.models.api_machine_restart import ApiMachineRestart
from fly_sdk.models.api_machine_service import ApiMachineService
from fly_sdk.models.api_static import ApiStatic
from fly_sdk.models.api_stop_config import ApiStopConfig
from typing import Optional, Set
from typing_extensions import Self

class ApiMachineConfig(BaseModel):
    """
    ApiMachineConfig
    """ # noqa: E501
    auto_destroy: Optional[StrictBool] = Field(default=None, description="Optional boolean telling the Machine to destroy itself once it’s complete (default false)")
    checks: Optional[Dict[str, ApiMachineCheck]] = None
    disable_machine_autostart: Optional[StrictBool] = Field(default=None, description="Deprecated: use Service.Autostart instead")
    dns: Optional[ApiDNSConfig] = None
    env: Optional[Dict[str, StrictStr]] = Field(default=None, description="An object filled with key/value pairs to be set as environment variables")
    files: Optional[List[ApiFile]] = None
    guest: Optional[ApiMachineGuest] = None
    image: Optional[StrictStr] = Field(default=None, description="The docker image to run")
    init: Optional[ApiMachineInit] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    metrics: Optional[ApiMachineMetrics] = None
    mounts: Optional[List[ApiMachineMount]] = None
    processes: Optional[List[ApiMachineProcess]] = None
    restart: Optional[ApiMachineRestart] = None
    schedule: Optional[StrictStr] = None
    services: Optional[List[ApiMachineService]] = None
    size: Optional[StrictStr] = Field(default=None, description="Deprecated: use Guest instead")
    standbys: Optional[List[StrictStr]] = Field(default=None, description="Standbys enable a machine to be a standby for another. In the event of a hardware failure, the standby machine will be started.")
    statics: Optional[List[ApiStatic]] = None
    stop_config: Optional[ApiStopConfig] = None
    __properties: ClassVar[List[str]] = ["auto_destroy", "checks", "disable_machine_autostart", "dns", "env", "files", "guest", "image", "init", "metadata", "metrics", "mounts", "processes", "restart", "schedule", "services", "size", "standbys", "statics", "stop_config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiMachineConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in checks (dict)
        _field_dict = {}
        if self.checks:
            for _key in self.checks:
                if self.checks[_key]:
                    _field_dict[_key] = self.checks[_key].to_dict()
            _dict['checks'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of dns
        if self.dns:
            _dict['dns'] = self.dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of guest
        if self.guest:
            _dict['guest'] = self.guest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of init
        if self.init:
            _dict['init'] = self.init.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mounts (list)
        _items = []
        if self.mounts:
            for _item in self.mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in processes (list)
        _items = []
        if self.processes:
            for _item in self.processes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['processes'] = _items
        # override the default output from pydantic by calling `to_dict()` of restart
        if self.restart:
            _dict['restart'] = self.restart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item in self.services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statics (list)
        _items = []
        if self.statics:
            for _item in self.statics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statics'] = _items
        # override the default output from pydantic by calling `to_dict()` of stop_config
        if self.stop_config:
            _dict['stop_config'] = self.stop_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiMachineConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_destroy": obj.get("auto_destroy"),
            "checks": dict(
                (_k, ApiMachineCheck.from_dict(_v))
                for _k, _v in obj["checks"].items()
            )
            if obj.get("checks") is not None
            else None,
            "disable_machine_autostart": obj.get("disable_machine_autostart"),
            "dns": ApiDNSConfig.from_dict(obj["dns"]) if obj.get("dns") is not None else None,
            "env": obj.get("env"),
            "files": [ApiFile.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "guest": ApiMachineGuest.from_dict(obj["guest"]) if obj.get("guest") is not None else None,
            "image": obj.get("image"),
            "init": ApiMachineInit.from_dict(obj["init"]) if obj.get("init") is not None else None,
            "metadata": obj.get("metadata"),
            "metrics": ApiMachineMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "mounts": [ApiMachineMount.from_dict(_item) for _item in obj["mounts"]] if obj.get("mounts") is not None else None,
            "processes": [ApiMachineProcess.from_dict(_item) for _item in obj["processes"]] if obj.get("processes") is not None else None,
            "restart": ApiMachineRestart.from_dict(obj["restart"]) if obj.get("restart") is not None else None,
            "schedule": obj.get("schedule"),
            "services": [ApiMachineService.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "size": obj.get("size"),
            "standbys": obj.get("standbys"),
            "statics": [ApiStatic.from_dict(_item) for _item in obj["statics"]] if obj.get("statics") is not None else None,
            "stop_config": ApiStopConfig.from_dict(obj["stop_config"]) if obj.get("stop_config") is not None else None
        })
        return _obj


