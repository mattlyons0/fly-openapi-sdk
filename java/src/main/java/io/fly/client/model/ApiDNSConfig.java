/*
 * Machines API
 * # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fly.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fly.client.model.ApiDnsOption;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ApiDNSConfig
 */
@JsonPropertyOrder({
  ApiDNSConfig.JSON_PROPERTY_NAMESERVERS,
  ApiDNSConfig.JSON_PROPERTY_OPTIONS,
  ApiDNSConfig.JSON_PROPERTY_SEARCHES,
  ApiDNSConfig.JSON_PROPERTY_SKIP_REGISTRATION
})
@JsonTypeName("api.DNSConfig")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-04T03:51:46.085129836Z[Etc/UTC]")
public class ApiDNSConfig {
  public static final String JSON_PROPERTY_NAMESERVERS = "nameservers";
  private List<String> nameservers;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private List<ApiDnsOption> options;

  public static final String JSON_PROPERTY_SEARCHES = "searches";
  private List<String> searches;

  public static final String JSON_PROPERTY_SKIP_REGISTRATION = "skip_registration";
  private Boolean skipRegistration;

  public ApiDNSConfig() {
  }

  public ApiDNSConfig nameservers(List<String> nameservers) {
    
    this.nameservers = nameservers;
    return this;
  }

  public ApiDNSConfig addNameserversItem(String nameserversItem) {
    if (this.nameservers == null) {
      this.nameservers = new ArrayList<>();
    }
    this.nameservers.add(nameserversItem);
    return this;
  }

   /**
   * Get nameservers
   * @return nameservers
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAMESERVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getNameservers() {
    return nameservers;
  }


  @JsonProperty(JSON_PROPERTY_NAMESERVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNameservers(List<String> nameservers) {
    this.nameservers = nameservers;
  }


  public ApiDNSConfig options(List<ApiDnsOption> options) {
    
    this.options = options;
    return this;
  }

  public ApiDNSConfig addOptionsItem(ApiDnsOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ApiDnsOption> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<ApiDnsOption> options) {
    this.options = options;
  }


  public ApiDNSConfig searches(List<String> searches) {
    
    this.searches = searches;
    return this;
  }

  public ApiDNSConfig addSearchesItem(String searchesItem) {
    if (this.searches == null) {
      this.searches = new ArrayList<>();
    }
    this.searches.add(searchesItem);
    return this;
  }

   /**
   * Get searches
   * @return searches
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SEARCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSearches() {
    return searches;
  }


  @JsonProperty(JSON_PROPERTY_SEARCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearches(List<String> searches) {
    this.searches = searches;
  }


  public ApiDNSConfig skipRegistration(Boolean skipRegistration) {
    
    this.skipRegistration = skipRegistration;
    return this;
  }

   /**
   * Get skipRegistration
   * @return skipRegistration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIP_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipRegistration() {
    return skipRegistration;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipRegistration(Boolean skipRegistration) {
    this.skipRegistration = skipRegistration;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiDNSConfig apiDNSConfig = (ApiDNSConfig) o;
    return Objects.equals(this.nameservers, apiDNSConfig.nameservers) &&
        Objects.equals(this.options, apiDNSConfig.options) &&
        Objects.equals(this.searches, apiDNSConfig.searches) &&
        Objects.equals(this.skipRegistration, apiDNSConfig.skipRegistration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nameservers, options, searches, skipRegistration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiDNSConfig {\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    searches: ").append(toIndentedString(searches)).append("\n");
    sb.append("    skipRegistration: ").append(toIndentedString(skipRegistration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

