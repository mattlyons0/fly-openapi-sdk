/*
 * Machines API
 * # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fly.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fly.client.model.ApiMachineHTTPHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * An optional object that defines one or more named checks. The key for each check is the check name.
 */
@Schema(description = "An optional object that defines one or more named checks. The key for each check is the check name.")
@JsonPropertyOrder({
  ApiMachineCheck.JSON_PROPERTY_GRACE_PERIOD,
  ApiMachineCheck.JSON_PROPERTY_HEADERS,
  ApiMachineCheck.JSON_PROPERTY_INTERVAL,
  ApiMachineCheck.JSON_PROPERTY_METHOD,
  ApiMachineCheck.JSON_PROPERTY_PATH,
  ApiMachineCheck.JSON_PROPERTY_PORT,
  ApiMachineCheck.JSON_PROPERTY_PROTOCOL,
  ApiMachineCheck.JSON_PROPERTY_TIMEOUT,
  ApiMachineCheck.JSON_PROPERTY_TLS_SERVER_NAME,
  ApiMachineCheck.JSON_PROPERTY_TLS_SKIP_VERIFY,
  ApiMachineCheck.JSON_PROPERTY_TYPE
})
@JsonTypeName("api.MachineCheck")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-04T03:51:46.085129836Z[Etc/UTC]")
public class ApiMachineCheck {
  public static final String JSON_PROPERTY_GRACE_PERIOD = "grace_period";
  private String gracePeriod;

  public static final String JSON_PROPERTY_HEADERS = "headers";
  private List<ApiMachineHTTPHeader> headers;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private String interval;

  public static final String JSON_PROPERTY_METHOD = "method";
  private String method;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private String protocol;

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  private String timeout;

  public static final String JSON_PROPERTY_TLS_SERVER_NAME = "tls_server_name";
  private String tlsServerName;

  public static final String JSON_PROPERTY_TLS_SKIP_VERIFY = "tls_skip_verify";
  private Boolean tlsSkipVerify;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public ApiMachineCheck() {
  }

  public ApiMachineCheck gracePeriod(String gracePeriod) {
    
    this.gracePeriod = gracePeriod;
    return this;
  }

   /**
   * The time to wait after a VM starts before checking its health
   * @return gracePeriod
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The time to wait after a VM starts before checking its health")
  @JsonProperty(JSON_PROPERTY_GRACE_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGracePeriod() {
    return gracePeriod;
  }


  @JsonProperty(JSON_PROPERTY_GRACE_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ApiMachineCheck headers(List<ApiMachineHTTPHeader> headers) {
    
    this.headers = headers;
    return this;
  }

  public ApiMachineCheck addHeadersItem(ApiMachineHTTPHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ApiMachineHTTPHeader> getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeaders(List<ApiMachineHTTPHeader> headers) {
    this.headers = headers;
  }


  public ApiMachineCheck interval(String interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * The time between connectivity checks
   * @return interval
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The time between connectivity checks")
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(String interval) {
    this.interval = interval;
  }


  public ApiMachineCheck method(String method) {
    
    this.method = method;
    return this;
  }

   /**
   * For http checks, the HTTP method to use to when making the request
   * @return method
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "For http checks, the HTTP method to use to when making the request")
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(String method) {
    this.method = method;
  }


  public ApiMachineCheck path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * For http checks, the path to send the request to
   * @return path
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "For http checks, the path to send the request to")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }


  public ApiMachineCheck port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * The port to connect to, often the same as internal_port
   * @return port
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The port to connect to, often the same as internal_port")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public ApiMachineCheck protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * For http checks, whether to use http or https
   * @return protocol
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "For http checks, whether to use http or https")
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ApiMachineCheck timeout(String timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * The maximum time a connection can take before being reported as failing its health check
   * @return timeout
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The maximum time a connection can take before being reported as failing its health check")
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public ApiMachineCheck tlsServerName(String tlsServerName) {
    
    this.tlsServerName = tlsServerName;
    return this;
  }

   /**
   * If the protocol is https, the hostname to use for TLS certificate validation
   * @return tlsServerName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the protocol is https, the hostname to use for TLS certificate validation")
  @JsonProperty(JSON_PROPERTY_TLS_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTlsServerName() {
    return tlsServerName;
  }


  @JsonProperty(JSON_PROPERTY_TLS_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
  }


  public ApiMachineCheck tlsSkipVerify(Boolean tlsSkipVerify) {
    
    this.tlsSkipVerify = tlsSkipVerify;
    return this;
  }

   /**
   * For http checks with https protocol, whether or not to verify the TLS certificate
   * @return tlsSkipVerify
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "For http checks with https protocol, whether or not to verify the TLS certificate")
  @JsonProperty(JSON_PROPERTY_TLS_SKIP_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTlsSkipVerify() {
    return tlsSkipVerify;
  }


  @JsonProperty(JSON_PROPERTY_TLS_SKIP_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsSkipVerify(Boolean tlsSkipVerify) {
    this.tlsSkipVerify = tlsSkipVerify;
  }


  public ApiMachineCheck type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * tcp or http
   * @return type
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "tcp or http")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachineCheck apiMachineCheck = (ApiMachineCheck) o;
    return Objects.equals(this.gracePeriod, apiMachineCheck.gracePeriod) &&
        Objects.equals(this.headers, apiMachineCheck.headers) &&
        Objects.equals(this.interval, apiMachineCheck.interval) &&
        Objects.equals(this.method, apiMachineCheck.method) &&
        Objects.equals(this.path, apiMachineCheck.path) &&
        Objects.equals(this.port, apiMachineCheck.port) &&
        Objects.equals(this.protocol, apiMachineCheck.protocol) &&
        Objects.equals(this.timeout, apiMachineCheck.timeout) &&
        Objects.equals(this.tlsServerName, apiMachineCheck.tlsServerName) &&
        Objects.equals(this.tlsSkipVerify, apiMachineCheck.tlsSkipVerify) &&
        Objects.equals(this.type, apiMachineCheck.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gracePeriod, headers, interval, method, path, port, protocol, timeout, tlsServerName, tlsSkipVerify, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachineCheck {\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    tlsServerName: ").append(toIndentedString(tlsServerName)).append("\n");
    sb.append("    tlsSkipVerify: ").append(toIndentedString(tlsSkipVerify)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

