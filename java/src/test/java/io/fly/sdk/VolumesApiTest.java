/*
 * Machines API
 * # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fly.sdk;

import io.fly.client.model.CreateVolumeRequest;
import io.fly.client.model.ErrorResponse;
import io.fly.client.model.ExtendVolumeRequest;
import io.fly.client.model.ExtendVolumeResponse;
import io.fly.client.model.UpdateVolumeRequest;
import io.fly.client.model.Volume;
import io.fly.client.model.VolumeSnapshot;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VolumesApi
 */
@Ignore
public class VolumesApiTest {

    private final VolumesApi api = new VolumesApi();

    
    /**
     * Create Snapshot
     *
     * Create a snapshot for a specific volume within an app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVolumeSnapshotTest() {
        String appName = null;
        String volumeId = null;

        api.createVolumeSnapshot(appName, volumeId);

        // TODO: test validations
    }
    
    /**
     * Destroy Volume
     *
     * Delete a specific volume within an app by volume ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumeDeleteTest() {
        String appName = null;
        String volumeId = null;

        Volume response = api.volumeDelete(appName, volumeId);

        // TODO: test validations
    }
    
    /**
     * Create Volume
     *
     * Create a volume for a specific app using the details provided in the request body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesCreateTest() {
        String appName = null;
        CreateVolumeRequest request = null;

        Volume response = api.volumesCreate(appName, request);

        // TODO: test validations
    }
    
    /**
     * Extend Volume
     *
     * Extend a volume&#39;s size within an app using the details provided in the request body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesExtendTest() {
        String appName = null;
        String volumeId = null;
        ExtendVolumeRequest request = null;

        ExtendVolumeResponse response = api.volumesExtend(appName, volumeId, request);

        // TODO: test validations
    }
    
    /**
     * Get Volume
     *
     * Retrieve details about a specific volume by its ID within an app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesGetByIdTest() {
        String appName = null;
        String volumeId = null;

        Volume response = api.volumesGetById(appName, volumeId);

        // TODO: test validations
    }
    
    /**
     * List Volumes
     *
     * List all volumes associated with a specific app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesListTest() {
        String appName = null;

        List<Volume> response = api.volumesList(appName);

        // TODO: test validations
    }
    
    /**
     * List Snapshots
     *
     * List all snapshots for a specific volume within an app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesListSnapshotsTest() {
        String appName = null;
        String volumeId = null;

        List<VolumeSnapshot> response = api.volumesListSnapshots(appName, volumeId);

        // TODO: test validations
    }
    
    /**
     * Update Volume
     *
     * Update a volume&#39;s configuration using the details provided in the request body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void volumesUpdateTest() {
        String appName = null;
        String volumeId = null;
        UpdateVolumeRequest request = null;

        Volume response = api.volumesUpdate(appName, volumeId, request);

        // TODO: test validations
    }
    
}
