/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
)

// checks if the ProcessStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessStat{}

// ProcessStat struct for ProcessStat
type ProcessStat struct {
	Command *string `json:"command,omitempty"`
	Cpu *int32 `json:"cpu,omitempty"`
	Directory *string `json:"directory,omitempty"`
	ListenSockets []ListenSocket `json:"listen_sockets,omitempty"`
	Pid *int32 `json:"pid,omitempty"`
	Rss *int32 `json:"rss,omitempty"`
	Rtime *int32 `json:"rtime,omitempty"`
	Stime *int32 `json:"stime,omitempty"`
}

// NewProcessStat instantiates a new ProcessStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessStat() *ProcessStat {
	this := ProcessStat{}
	return &this
}

// NewProcessStatWithDefaults instantiates a new ProcessStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessStatWithDefaults() *ProcessStat {
	this := ProcessStat{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ProcessStat) GetCommand() string {
	if o == nil || IsNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetCommandOk() (*string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ProcessStat) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *ProcessStat) SetCommand(v string) {
	o.Command = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ProcessStat) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ProcessStat) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *ProcessStat) SetCpu(v int32) {
	o.Cpu = &v
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *ProcessStat) GetDirectory() string {
	if o == nil || IsNil(o.Directory) {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *ProcessStat) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *ProcessStat) SetDirectory(v string) {
	o.Directory = &v
}

// GetListenSockets returns the ListenSockets field value if set, zero value otherwise.
func (o *ProcessStat) GetListenSockets() []ListenSocket {
	if o == nil || IsNil(o.ListenSockets) {
		var ret []ListenSocket
		return ret
	}
	return o.ListenSockets
}

// GetListenSocketsOk returns a tuple with the ListenSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetListenSocketsOk() ([]ListenSocket, bool) {
	if o == nil || IsNil(o.ListenSockets) {
		return nil, false
	}
	return o.ListenSockets, true
}

// HasListenSockets returns a boolean if a field has been set.
func (o *ProcessStat) HasListenSockets() bool {
	if o != nil && !IsNil(o.ListenSockets) {
		return true
	}

	return false
}

// SetListenSockets gets a reference to the given []ListenSocket and assigns it to the ListenSockets field.
func (o *ProcessStat) SetListenSockets(v []ListenSocket) {
	o.ListenSockets = v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *ProcessStat) GetPid() int32 {
	if o == nil || IsNil(o.Pid) {
		var ret int32
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetPidOk() (*int32, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *ProcessStat) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given int32 and assigns it to the Pid field.
func (o *ProcessStat) SetPid(v int32) {
	o.Pid = &v
}

// GetRss returns the Rss field value if set, zero value otherwise.
func (o *ProcessStat) GetRss() int32 {
	if o == nil || IsNil(o.Rss) {
		var ret int32
		return ret
	}
	return *o.Rss
}

// GetRssOk returns a tuple with the Rss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetRssOk() (*int32, bool) {
	if o == nil || IsNil(o.Rss) {
		return nil, false
	}
	return o.Rss, true
}

// HasRss returns a boolean if a field has been set.
func (o *ProcessStat) HasRss() bool {
	if o != nil && !IsNil(o.Rss) {
		return true
	}

	return false
}

// SetRss gets a reference to the given int32 and assigns it to the Rss field.
func (o *ProcessStat) SetRss(v int32) {
	o.Rss = &v
}

// GetRtime returns the Rtime field value if set, zero value otherwise.
func (o *ProcessStat) GetRtime() int32 {
	if o == nil || IsNil(o.Rtime) {
		var ret int32
		return ret
	}
	return *o.Rtime
}

// GetRtimeOk returns a tuple with the Rtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetRtimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Rtime) {
		return nil, false
	}
	return o.Rtime, true
}

// HasRtime returns a boolean if a field has been set.
func (o *ProcessStat) HasRtime() bool {
	if o != nil && !IsNil(o.Rtime) {
		return true
	}

	return false
}

// SetRtime gets a reference to the given int32 and assigns it to the Rtime field.
func (o *ProcessStat) SetRtime(v int32) {
	o.Rtime = &v
}

// GetStime returns the Stime field value if set, zero value otherwise.
func (o *ProcessStat) GetStime() int32 {
	if o == nil || IsNil(o.Stime) {
		var ret int32
		return ret
	}
	return *o.Stime
}

// GetStimeOk returns a tuple with the Stime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStat) GetStimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Stime) {
		return nil, false
	}
	return o.Stime, true
}

// HasStime returns a boolean if a field has been set.
func (o *ProcessStat) HasStime() bool {
	if o != nil && !IsNil(o.Stime) {
		return true
	}

	return false
}

// SetStime gets a reference to the given int32 and assigns it to the Stime field.
func (o *ProcessStat) SetStime(v int32) {
	o.Stime = &v
}

func (o ProcessStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}
	if !IsNil(o.ListenSockets) {
		toSerialize["listen_sockets"] = o.ListenSockets
	}
	if !IsNil(o.Pid) {
		toSerialize["pid"] = o.Pid
	}
	if !IsNil(o.Rss) {
		toSerialize["rss"] = o.Rss
	}
	if !IsNil(o.Rtime) {
		toSerialize["rtime"] = o.Rtime
	}
	if !IsNil(o.Stime) {
		toSerialize["stime"] = o.Stime
	}
	return toSerialize, nil
}

type NullableProcessStat struct {
	value *ProcessStat
	isSet bool
}

func (v NullableProcessStat) Get() *ProcessStat {
	return v.value
}

func (v *NullableProcessStat) Set(val *ProcessStat) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessStat) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessStat(val *ProcessStat) *NullableProcessStat {
	return &NullableProcessStat{value: val, isSet: true}
}

func (v NullableProcessStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


