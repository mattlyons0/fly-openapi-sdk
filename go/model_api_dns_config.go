/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
)

// checks if the ApiDNSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiDNSConfig{}

// ApiDNSConfig struct for ApiDNSConfig
type ApiDNSConfig struct {
	Nameservers []string `json:"nameservers,omitempty"`
	Options []ApiDnsOption `json:"options,omitempty"`
	Searches []string `json:"searches,omitempty"`
	SkipRegistration *bool `json:"skip_registration,omitempty"`
}

// NewApiDNSConfig instantiates a new ApiDNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDNSConfig() *ApiDNSConfig {
	this := ApiDNSConfig{}
	return &this
}

// NewApiDNSConfigWithDefaults instantiates a new ApiDNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDNSConfigWithDefaults() *ApiDNSConfig {
	this := ApiDNSConfig{}
	return &this
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *ApiDNSConfig) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDNSConfig) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *ApiDNSConfig) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *ApiDNSConfig) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ApiDNSConfig) GetOptions() []ApiDnsOption {
	if o == nil || IsNil(o.Options) {
		var ret []ApiDnsOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDNSConfig) GetOptionsOk() ([]ApiDnsOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ApiDNSConfig) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []ApiDnsOption and assigns it to the Options field.
func (o *ApiDNSConfig) SetOptions(v []ApiDnsOption) {
	o.Options = v
}

// GetSearches returns the Searches field value if set, zero value otherwise.
func (o *ApiDNSConfig) GetSearches() []string {
	if o == nil || IsNil(o.Searches) {
		var ret []string
		return ret
	}
	return o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDNSConfig) GetSearchesOk() ([]string, bool) {
	if o == nil || IsNil(o.Searches) {
		return nil, false
	}
	return o.Searches, true
}

// HasSearches returns a boolean if a field has been set.
func (o *ApiDNSConfig) HasSearches() bool {
	if o != nil && !IsNil(o.Searches) {
		return true
	}

	return false
}

// SetSearches gets a reference to the given []string and assigns it to the Searches field.
func (o *ApiDNSConfig) SetSearches(v []string) {
	o.Searches = v
}

// GetSkipRegistration returns the SkipRegistration field value if set, zero value otherwise.
func (o *ApiDNSConfig) GetSkipRegistration() bool {
	if o == nil || IsNil(o.SkipRegistration) {
		var ret bool
		return ret
	}
	return *o.SkipRegistration
}

// GetSkipRegistrationOk returns a tuple with the SkipRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDNSConfig) GetSkipRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipRegistration) {
		return nil, false
	}
	return o.SkipRegistration, true
}

// HasSkipRegistration returns a boolean if a field has been set.
func (o *ApiDNSConfig) HasSkipRegistration() bool {
	if o != nil && !IsNil(o.SkipRegistration) {
		return true
	}

	return false
}

// SetSkipRegistration gets a reference to the given bool and assigns it to the SkipRegistration field.
func (o *ApiDNSConfig) SetSkipRegistration(v bool) {
	o.SkipRegistration = &v
}

func (o ApiDNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDNSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Searches) {
		toSerialize["searches"] = o.Searches
	}
	if !IsNil(o.SkipRegistration) {
		toSerialize["skip_registration"] = o.SkipRegistration
	}
	return toSerialize, nil
}

type NullableApiDNSConfig struct {
	value *ApiDNSConfig
	isSet bool
}

func (v NullableApiDNSConfig) Get() *ApiDNSConfig {
	return v.value
}

func (v *NullableApiDNSConfig) Set(val *ApiDNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDNSConfig(val *ApiDNSConfig) *NullableApiDNSConfig {
	return &NullableApiDNSConfig{value: val, isSet: true}
}

func (v NullableApiDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


