/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiStatic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiStatic{}

// ApiStatic struct for ApiStatic
type ApiStatic struct {
	GuestPath string `json:"guest_path"`
	TigrisBucket *string `json:"tigris_bucket,omitempty"`
	UrlPrefix string `json:"url_prefix"`
}

type _ApiStatic ApiStatic

// NewApiStatic instantiates a new ApiStatic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiStatic(guestPath string, urlPrefix string) *ApiStatic {
	this := ApiStatic{}
	this.GuestPath = guestPath
	this.UrlPrefix = urlPrefix
	return &this
}

// NewApiStaticWithDefaults instantiates a new ApiStatic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiStaticWithDefaults() *ApiStatic {
	this := ApiStatic{}
	return &this
}

// GetGuestPath returns the GuestPath field value
func (o *ApiStatic) GetGuestPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GuestPath
}

// GetGuestPathOk returns a tuple with the GuestPath field value
// and a boolean to check if the value has been set.
func (o *ApiStatic) GetGuestPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuestPath, true
}

// SetGuestPath sets field value
func (o *ApiStatic) SetGuestPath(v string) {
	o.GuestPath = v
}

// GetTigrisBucket returns the TigrisBucket field value if set, zero value otherwise.
func (o *ApiStatic) GetTigrisBucket() string {
	if o == nil || IsNil(o.TigrisBucket) {
		var ret string
		return ret
	}
	return *o.TigrisBucket
}

// GetTigrisBucketOk returns a tuple with the TigrisBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiStatic) GetTigrisBucketOk() (*string, bool) {
	if o == nil || IsNil(o.TigrisBucket) {
		return nil, false
	}
	return o.TigrisBucket, true
}

// HasTigrisBucket returns a boolean if a field has been set.
func (o *ApiStatic) HasTigrisBucket() bool {
	if o != nil && !IsNil(o.TigrisBucket) {
		return true
	}

	return false
}

// SetTigrisBucket gets a reference to the given string and assigns it to the TigrisBucket field.
func (o *ApiStatic) SetTigrisBucket(v string) {
	o.TigrisBucket = &v
}

// GetUrlPrefix returns the UrlPrefix field value
func (o *ApiStatic) GetUrlPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UrlPrefix
}

// GetUrlPrefixOk returns a tuple with the UrlPrefix field value
// and a boolean to check if the value has been set.
func (o *ApiStatic) GetUrlPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UrlPrefix, true
}

// SetUrlPrefix sets field value
func (o *ApiStatic) SetUrlPrefix(v string) {
	o.UrlPrefix = v
}

func (o ApiStatic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiStatic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["guest_path"] = o.GuestPath
	if !IsNil(o.TigrisBucket) {
		toSerialize["tigris_bucket"] = o.TigrisBucket
	}
	toSerialize["url_prefix"] = o.UrlPrefix
	return toSerialize, nil
}

func (o *ApiStatic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"guest_path",
		"url_prefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiStatic := _ApiStatic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiStatic)

	if err != nil {
		return err
	}

	*o = ApiStatic(varApiStatic)

	return err
}

type NullableApiStatic struct {
	value *ApiStatic
	isSet bool
}

func (v NullableApiStatic) Get() *ApiStatic {
	return v.value
}

func (v *NullableApiStatic) Set(val *ApiStatic) {
	v.value = val
	v.isSet = true
}

func (v NullableApiStatic) IsSet() bool {
	return v.isSet
}

func (v *NullableApiStatic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiStatic(val *ApiStatic) *NullableApiStatic {
	return &NullableApiStatic{value: val, isSet: true}
}

func (v NullableApiStatic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiStatic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


