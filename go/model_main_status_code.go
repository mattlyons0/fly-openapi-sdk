/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
	"fmt"
)

// MainStatusCode the model 'MainStatusCode'
type MainStatusCode string

// List of main.statusCode
const (
	unknown MainStatusCode = "unknown"
	capacityErr MainStatusCode = "insufficient_capacity"
)

// All allowed values of MainStatusCode enum
var AllowedMainStatusCodeEnumValues = []MainStatusCode{
	"unknown",
	"insufficient_capacity",
}

func (v *MainStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MainStatusCode(value)
	for _, existing := range AllowedMainStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MainStatusCode", value)
}

// NewMainStatusCodeFromValue returns a pointer to a valid MainStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMainStatusCodeFromValue(v string) (*MainStatusCode, error) {
	ev := MainStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MainStatusCode: valid values are %v", v, AllowedMainStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MainStatusCode) IsValid() bool {
	for _, existing := range AllowedMainStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to main.statusCode value
func (v MainStatusCode) Ptr() *MainStatusCode {
	return &v
}

type NullableMainStatusCode struct {
	value *MainStatusCode
	isSet bool
}

func (v NullableMainStatusCode) Get() *MainStatusCode {
	return v.value
}

func (v *NullableMainStatusCode) Set(val *MainStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMainStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMainStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainStatusCode(val *MainStatusCode) *NullableMainStatusCode {
	return &NullableMainStatusCode{value: val, isSet: true}
}

func (v NullableMainStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

