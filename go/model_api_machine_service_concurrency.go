/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
)

// checks if the ApiMachineServiceConcurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiMachineServiceConcurrency{}

// ApiMachineServiceConcurrency struct for ApiMachineServiceConcurrency
type ApiMachineServiceConcurrency struct {
	HardLimit *int32 `json:"hard_limit,omitempty"`
	SoftLimit *int32 `json:"soft_limit,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewApiMachineServiceConcurrency instantiates a new ApiMachineServiceConcurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiMachineServiceConcurrency() *ApiMachineServiceConcurrency {
	this := ApiMachineServiceConcurrency{}
	return &this
}

// NewApiMachineServiceConcurrencyWithDefaults instantiates a new ApiMachineServiceConcurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiMachineServiceConcurrencyWithDefaults() *ApiMachineServiceConcurrency {
	this := ApiMachineServiceConcurrency{}
	return &this
}

// GetHardLimit returns the HardLimit field value if set, zero value otherwise.
func (o *ApiMachineServiceConcurrency) GetHardLimit() int32 {
	if o == nil || IsNil(o.HardLimit) {
		var ret int32
		return ret
	}
	return *o.HardLimit
}

// GetHardLimitOk returns a tuple with the HardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMachineServiceConcurrency) GetHardLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.HardLimit) {
		return nil, false
	}
	return o.HardLimit, true
}

// HasHardLimit returns a boolean if a field has been set.
func (o *ApiMachineServiceConcurrency) HasHardLimit() bool {
	if o != nil && !IsNil(o.HardLimit) {
		return true
	}

	return false
}

// SetHardLimit gets a reference to the given int32 and assigns it to the HardLimit field.
func (o *ApiMachineServiceConcurrency) SetHardLimit(v int32) {
	o.HardLimit = &v
}

// GetSoftLimit returns the SoftLimit field value if set, zero value otherwise.
func (o *ApiMachineServiceConcurrency) GetSoftLimit() int32 {
	if o == nil || IsNil(o.SoftLimit) {
		var ret int32
		return ret
	}
	return *o.SoftLimit
}

// GetSoftLimitOk returns a tuple with the SoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMachineServiceConcurrency) GetSoftLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.SoftLimit) {
		return nil, false
	}
	return o.SoftLimit, true
}

// HasSoftLimit returns a boolean if a field has been set.
func (o *ApiMachineServiceConcurrency) HasSoftLimit() bool {
	if o != nil && !IsNil(o.SoftLimit) {
		return true
	}

	return false
}

// SetSoftLimit gets a reference to the given int32 and assigns it to the SoftLimit field.
func (o *ApiMachineServiceConcurrency) SetSoftLimit(v int32) {
	o.SoftLimit = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiMachineServiceConcurrency) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMachineServiceConcurrency) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiMachineServiceConcurrency) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiMachineServiceConcurrency) SetType(v string) {
	o.Type = &v
}

func (o ApiMachineServiceConcurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiMachineServiceConcurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HardLimit) {
		toSerialize["hard_limit"] = o.HardLimit
	}
	if !IsNil(o.SoftLimit) {
		toSerialize["soft_limit"] = o.SoftLimit
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableApiMachineServiceConcurrency struct {
	value *ApiMachineServiceConcurrency
	isSet bool
}

func (v NullableApiMachineServiceConcurrency) Get() *ApiMachineServiceConcurrency {
	return v.value
}

func (v *NullableApiMachineServiceConcurrency) Set(val *ApiMachineServiceConcurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableApiMachineServiceConcurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableApiMachineServiceConcurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiMachineServiceConcurrency(val *ApiMachineServiceConcurrency) *NullableApiMachineServiceConcurrency {
	return &NullableApiMachineServiceConcurrency{value: val, isSet: true}
}

func (v NullableApiMachineServiceConcurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiMachineServiceConcurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


