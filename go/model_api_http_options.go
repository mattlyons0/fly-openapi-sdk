/*
Machines API

# Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
)

// checks if the ApiHTTPOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHTTPOptions{}

// ApiHTTPOptions struct for ApiHTTPOptions
type ApiHTTPOptions struct {
	Compress *bool `json:"compress,omitempty"`
	H2Backend *bool `json:"h2_backend,omitempty"`
	Response *ApiHTTPResponseOptions `json:"response,omitempty"`
}

// NewApiHTTPOptions instantiates a new ApiHTTPOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHTTPOptions() *ApiHTTPOptions {
	this := ApiHTTPOptions{}
	return &this
}

// NewApiHTTPOptionsWithDefaults instantiates a new ApiHTTPOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHTTPOptionsWithDefaults() *ApiHTTPOptions {
	this := ApiHTTPOptions{}
	return &this
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *ApiHTTPOptions) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiHTTPOptions) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *ApiHTTPOptions) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *ApiHTTPOptions) SetCompress(v bool) {
	o.Compress = &v
}

// GetH2Backend returns the H2Backend field value if set, zero value otherwise.
func (o *ApiHTTPOptions) GetH2Backend() bool {
	if o == nil || IsNil(o.H2Backend) {
		var ret bool
		return ret
	}
	return *o.H2Backend
}

// GetH2BackendOk returns a tuple with the H2Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiHTTPOptions) GetH2BackendOk() (*bool, bool) {
	if o == nil || IsNil(o.H2Backend) {
		return nil, false
	}
	return o.H2Backend, true
}

// HasH2Backend returns a boolean if a field has been set.
func (o *ApiHTTPOptions) HasH2Backend() bool {
	if o != nil && !IsNil(o.H2Backend) {
		return true
	}

	return false
}

// SetH2Backend gets a reference to the given bool and assigns it to the H2Backend field.
func (o *ApiHTTPOptions) SetH2Backend(v bool) {
	o.H2Backend = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *ApiHTTPOptions) GetResponse() ApiHTTPResponseOptions {
	if o == nil || IsNil(o.Response) {
		var ret ApiHTTPResponseOptions
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiHTTPOptions) GetResponseOk() (*ApiHTTPResponseOptions, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *ApiHTTPOptions) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given ApiHTTPResponseOptions and assigns it to the Response field.
func (o *ApiHTTPOptions) SetResponse(v ApiHTTPResponseOptions) {
	o.Response = &v
}

func (o ApiHTTPOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHTTPOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.H2Backend) {
		toSerialize["h2_backend"] = o.H2Backend
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	return toSerialize, nil
}

type NullableApiHTTPOptions struct {
	value *ApiHTTPOptions
	isSet bool
}

func (v NullableApiHTTPOptions) Get() *ApiHTTPOptions {
	return v.value
}

func (v *NullableApiHTTPOptions) Set(val *ApiHTTPOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHTTPOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHTTPOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHTTPOptions(val *ApiHTTPOptions) *NullableApiHTTPOptions {
	return &NullableApiHTTPOptions{value: val, isSet: true}
}

func (v NullableApiHTTPOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHTTPOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


