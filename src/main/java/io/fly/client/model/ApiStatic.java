/*
 * Machines API
 * # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fly.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ApiStatic
 */
@JsonPropertyOrder({
  ApiStatic.JSON_PROPERTY_GUEST_PATH,
  ApiStatic.JSON_PROPERTY_TIGRIS_BUCKET,
  ApiStatic.JSON_PROPERTY_URL_PREFIX
})
@JsonTypeName("api.Static")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiStatic {
  public static final String JSON_PROPERTY_GUEST_PATH = "guest_path";
  private String guestPath;

  public static final String JSON_PROPERTY_TIGRIS_BUCKET = "tigris_bucket";
  private String tigrisBucket;

  public static final String JSON_PROPERTY_URL_PREFIX = "url_prefix";
  private String urlPrefix;

  public ApiStatic() {
  }

  public ApiStatic guestPath(String guestPath) {
    
    this.guestPath = guestPath;
    return this;
  }

   /**
   * Get guestPath
   * @return guestPath
  **/
  @jakarta.annotation.Nonnull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_GUEST_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGuestPath() {
    return guestPath;
  }


  @JsonProperty(JSON_PROPERTY_GUEST_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGuestPath(String guestPath) {
    this.guestPath = guestPath;
  }


  public ApiStatic tigrisBucket(String tigrisBucket) {
    
    this.tigrisBucket = tigrisBucket;
    return this;
  }

   /**
   * Get tigrisBucket
   * @return tigrisBucket
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TIGRIS_BUCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTigrisBucket() {
    return tigrisBucket;
  }


  @JsonProperty(JSON_PROPERTY_TIGRIS_BUCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTigrisBucket(String tigrisBucket) {
    this.tigrisBucket = tigrisBucket;
  }


  public ApiStatic urlPrefix(String urlPrefix) {
    
    this.urlPrefix = urlPrefix;
    return this;
  }

   /**
   * Get urlPrefix
   * @return urlPrefix
  **/
  @jakarta.annotation.Nonnull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_URL_PREFIX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrlPrefix() {
    return urlPrefix;
  }


  @JsonProperty(JSON_PROPERTY_URL_PREFIX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrlPrefix(String urlPrefix) {
    this.urlPrefix = urlPrefix;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiStatic apiStatic = (ApiStatic) o;
    return Objects.equals(this.guestPath, apiStatic.guestPath) &&
        Objects.equals(this.tigrisBucket, apiStatic.tigrisBucket) &&
        Objects.equals(this.urlPrefix, apiStatic.urlPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guestPath, tigrisBucket, urlPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiStatic {\n");
    sb.append("    guestPath: ").append(toIndentedString(guestPath)).append("\n");
    sb.append("    tigrisBucket: ").append(toIndentedString(tigrisBucket)).append("\n");
    sb.append("    urlPrefix: ").append(toIndentedString(urlPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

