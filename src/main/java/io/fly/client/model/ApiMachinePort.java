/*
 * Machines API
 * # Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fly.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fly.client.model.ApiHTTPOptions;
import io.fly.client.model.ApiProxyProtoOptions;
import io.fly.client.model.ApiTLSOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ApiMachinePort
 */
@JsonPropertyOrder({
  ApiMachinePort.JSON_PROPERTY_END_PORT,
  ApiMachinePort.JSON_PROPERTY_FORCE_HTTPS,
  ApiMachinePort.JSON_PROPERTY_HANDLERS,
  ApiMachinePort.JSON_PROPERTY_HTTP_OPTIONS,
  ApiMachinePort.JSON_PROPERTY_PORT,
  ApiMachinePort.JSON_PROPERTY_PROXY_PROTO_OPTIONS,
  ApiMachinePort.JSON_PROPERTY_START_PORT,
  ApiMachinePort.JSON_PROPERTY_TLS_OPTIONS
})
@JsonTypeName("api.MachinePort")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-04T04:08:18.495225938Z[Etc/UTC]")
public class ApiMachinePort {
  public static final String JSON_PROPERTY_END_PORT = "end_port";
  private Integer endPort;

  public static final String JSON_PROPERTY_FORCE_HTTPS = "force_https";
  private Boolean forceHttps;

  public static final String JSON_PROPERTY_HANDLERS = "handlers";
  private List<String> handlers;

  public static final String JSON_PROPERTY_HTTP_OPTIONS = "http_options";
  private ApiHTTPOptions httpOptions;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_PROXY_PROTO_OPTIONS = "proxy_proto_options";
  private ApiProxyProtoOptions proxyProtoOptions;

  public static final String JSON_PROPERTY_START_PORT = "start_port";
  private Integer startPort;

  public static final String JSON_PROPERTY_TLS_OPTIONS = "tls_options";
  private ApiTLSOptions tlsOptions;

  public ApiMachinePort() {
  }

  public ApiMachinePort endPort(Integer endPort) {
    
    this.endPort = endPort;
    return this;
  }

   /**
   * Get endPort
   * @return endPort
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_END_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEndPort() {
    return endPort;
  }


  @JsonProperty(JSON_PROPERTY_END_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndPort(Integer endPort) {
    this.endPort = endPort;
  }


  public ApiMachinePort forceHttps(Boolean forceHttps) {
    
    this.forceHttps = forceHttps;
    return this;
  }

   /**
   * Get forceHttps
   * @return forceHttps
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FORCE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForceHttps() {
    return forceHttps;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
  }


  public ApiMachinePort handlers(List<String> handlers) {
    
    this.handlers = handlers;
    return this;
  }

  public ApiMachinePort addHandlersItem(String handlersItem) {
    if (this.handlers == null) {
      this.handlers = new ArrayList<>();
    }
    this.handlers.add(handlersItem);
    return this;
  }

   /**
   * Get handlers
   * @return handlers
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_HANDLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getHandlers() {
    return handlers;
  }


  @JsonProperty(JSON_PROPERTY_HANDLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHandlers(List<String> handlers) {
    this.handlers = handlers;
  }


  public ApiMachinePort httpOptions(ApiHTTPOptions httpOptions) {
    
    this.httpOptions = httpOptions;
    return this;
  }

   /**
   * Get httpOptions
   * @return httpOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_HTTP_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApiHTTPOptions getHttpOptions() {
    return httpOptions;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpOptions(ApiHTTPOptions httpOptions) {
    this.httpOptions = httpOptions;
  }


  public ApiMachinePort port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public ApiMachinePort proxyProtoOptions(ApiProxyProtoOptions proxyProtoOptions) {
    
    this.proxyProtoOptions = proxyProtoOptions;
    return this;
  }

   /**
   * Get proxyProtoOptions
   * @return proxyProtoOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROXY_PROTO_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApiProxyProtoOptions getProxyProtoOptions() {
    return proxyProtoOptions;
  }


  @JsonProperty(JSON_PROPERTY_PROXY_PROTO_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProxyProtoOptions(ApiProxyProtoOptions proxyProtoOptions) {
    this.proxyProtoOptions = proxyProtoOptions;
  }


  public ApiMachinePort startPort(Integer startPort) {
    
    this.startPort = startPort;
    return this;
  }

   /**
   * Get startPort
   * @return startPort
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_START_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStartPort() {
    return startPort;
  }


  @JsonProperty(JSON_PROPERTY_START_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartPort(Integer startPort) {
    this.startPort = startPort;
  }


  public ApiMachinePort tlsOptions(ApiTLSOptions tlsOptions) {
    
    this.tlsOptions = tlsOptions;
    return this;
  }

   /**
   * Get tlsOptions
   * @return tlsOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TLS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApiTLSOptions getTlsOptions() {
    return tlsOptions;
  }


  @JsonProperty(JSON_PROPERTY_TLS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsOptions(ApiTLSOptions tlsOptions) {
    this.tlsOptions = tlsOptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachinePort apiMachinePort = (ApiMachinePort) o;
    return Objects.equals(this.endPort, apiMachinePort.endPort) &&
        Objects.equals(this.forceHttps, apiMachinePort.forceHttps) &&
        Objects.equals(this.handlers, apiMachinePort.handlers) &&
        Objects.equals(this.httpOptions, apiMachinePort.httpOptions) &&
        Objects.equals(this.port, apiMachinePort.port) &&
        Objects.equals(this.proxyProtoOptions, apiMachinePort.proxyProtoOptions) &&
        Objects.equals(this.startPort, apiMachinePort.startPort) &&
        Objects.equals(this.tlsOptions, apiMachinePort.tlsOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endPort, forceHttps, handlers, httpOptions, port, proxyProtoOptions, startPort, tlsOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachinePort {\n");
    sb.append("    endPort: ").append(toIndentedString(endPort)).append("\n");
    sb.append("    forceHttps: ").append(toIndentedString(forceHttps)).append("\n");
    sb.append("    handlers: ").append(toIndentedString(handlers)).append("\n");
    sb.append("    httpOptions: ").append(toIndentedString(httpOptions)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    proxyProtoOptions: ").append(toIndentedString(proxyProtoOptions)).append("\n");
    sb.append("    startPort: ").append(toIndentedString(startPort)).append("\n");
    sb.append("    tlsOptions: ").append(toIndentedString(tlsOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

