=begin
#Machines API

## Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once you’re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for FlySDK::MachinesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MachinesApi' do
  before do
    # run before each test
    @api_instance = FlySDK::MachinesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MachinesApi' do
    it 'should create an instance of MachinesApi' do
      expect(@api_instance).to be_instance_of(FlySDK::MachinesApi)
    end
  end

  # unit tests for machines_cordon
  # Cordon Machine
  # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_cordon test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_create
  # Create Machine
  # Create a Machine within a specific app using the details provided in the request body.  **Important**: This request can fail, and you’re responsible for handling that failure. If you ask for a large Machine, or a Machine in a region we happen to be at capacity for, you might need to retry the request, or to fall back to another region. If you’re working directly with the Machines API, you’re taking some responsibility for your own orchestration! 
  # @param app_name Fly App Name
  # @param request Create machine request
  # @param [Hash] opts the optional parameters
  # @return [Machine]
  describe 'machines_create test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_create_lease
  # Create Lease
  # Create a lease for a specific Machine within an app using the details provided in the request body. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param request Request body
  # @param [Hash] opts the optional parameters
  # @return [Lease]
  describe 'machines_create_lease test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_delete
  # Destroy Machine
  # Delete a specific Machine within an app by Machine ID, with an optional force parameter to force kill the Machine if it&#39;s running. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :force Force kill the machine if it&#39;s running
  # @return [nil]
  describe 'machines_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_delete_metadata
  # Delete Metadata
  # Delete metadata for a specific Machine within an app by providing a metadata key. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param key Metadata Key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_delete_metadata test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_exec
  # Execute Command
  # Execute a command on a specific Machine and return the raw command output bytes. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param request Request body
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'machines_exec test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_list
  # List Machines
  # List all Machines associated with a specific app, with optional filters for including deleted Machines and filtering by region. 
  # @param app_name Fly App Name
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_deleted Include deleted machines
  # @option opts [String] :region Region filter
  # @return [Array<Machine>]
  describe 'machines_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_list_events
  # List Events
  # List all events associated with a specific Machine within an app. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [Array<MachineEvent>]
  describe 'machines_list_events test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_list_processes
  # List Processes
  # List all processes running on a specific Machine within an app, with optional sorting parameters. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort_by Sort by
  # @option opts [String] :order Order
  # @return [Array<ProcessStat>]
  describe 'machines_list_processes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_list_versions
  # List Versions
  # List all versions of the configuration for a specific Machine within an app. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [Array<MachineVersion>]
  describe 'machines_list_versions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_release_lease
  # Release Lease
  # Release the lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_release_lease test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_restart
  # Restart Machine
  # Restart a specific Machine within an app, with an optional timeout parameter. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :timeout Restart timeout as a Go duration string or number of seconds
  # @return [nil]
  describe 'machines_restart test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_show
  # Get Machine
  # Get details of a specific Machine within an app by the Machine ID. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [Machine]
  describe 'machines_show test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_show_lease
  # Get Lease
  # Retrieve the current lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [Lease]
  describe 'machines_show_lease test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_show_metadata
  # Get Metadata
  # Retrieve metadata for a specific Machine within an app. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, String>]
  describe 'machines_show_metadata test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_signal
  # Signal Machine
  # Send a signal to a specific Machine within an app using the details provided in the request body. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param request Request body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_signal test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_start
  # Start Machine
  # Start a specific Machine within an app. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_start test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_stop
  # Stop Machine
  # Stop a specific Machine within an app, with an optional request body to specify signal and timeout. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @option opts [StopRequest] :request Optional request body
  # @return [nil]
  describe 'machines_stop test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_uncordon
  # Uncordon Machine
  # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_uncordon test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_update
  # Update Machine
  # Update a Machine&#39;s configuration using the details provided in the request body. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param request Request body
  # @param [Hash] opts the optional parameters
  # @return [Machine]
  describe 'machines_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_update_metadata
  # Update Metadata
  # Update metadata for a specific machine within an app by providing a metadata key. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param key Metadata Key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'machines_update_metadata test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for machines_wait
  # Wait for State
  # Wait for a Machine to reach a specific state. Specify the desired state with the state parameter. See the [Machine states table](https://fly.io/docs/machines/working-with-machines/#machine-states) for a list of possible states. The default for this parameter is &#x60;started&#x60;.  This request will block for up to 60 seconds. Set a shorter timeout with the timeout parameter. 
  # @param app_name Fly App Name
  # @param machine_id Machine ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :instance_id instance? version? TODO
  # @option opts [Integer] :timeout wait timeout. default 60s
  # @option opts [String] :state desired state
  # @return [nil]
  describe 'machines_wait test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
