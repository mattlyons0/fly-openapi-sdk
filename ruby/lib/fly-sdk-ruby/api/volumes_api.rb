=begin
#Machines API

## Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once youâ€™re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0-SNAPSHOT

=end

require 'cgi'

module FlySDK
  class VolumesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Snapshot
    # Create a snapshot for a specific volume within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_volume_snapshot(app_name, volume_id, opts = {})
      create_volume_snapshot_with_http_info(app_name, volume_id, opts)
      nil
    end

    # Create Snapshot
    # Create a snapshot for a specific volume within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_volume_snapshot_with_http_info(app_name, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.create_volume_snapshot ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.create_volume_snapshot"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.create_volume_snapshot"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}/snapshots'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.create_volume_snapshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#create_volume_snapshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Destroy Volume
    # Delete a specific volume within an app by volume ID. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def volume_delete(app_name, volume_id, opts = {})
      data, _status_code, _headers = volume_delete_with_http_info(app_name, volume_id, opts)
      data
    end

    # Destroy Volume
    # Delete a specific volume within an app by volume ID. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def volume_delete_with_http_info(app_name, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volume_delete ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volume_delete"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.volume_delete"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volume_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volume_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Volume
    # Create a volume for a specific app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param request [CreateVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def volumes_create(app_name, request, opts = {})
      data, _status_code, _headers = volumes_create_with_http_info(app_name, request, opts)
      data
    end

    # Create Volume
    # Create a volume for a specific app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param request [CreateVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def volumes_create_with_http_info(app_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_create ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_create"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling VolumesApi.volumes_create"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extend Volume
    # Extend a volume's size within an app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param request [ExtendVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [ExtendVolumeResponse]
    def volumes_extend(app_name, volume_id, request, opts = {})
      data, _status_code, _headers = volumes_extend_with_http_info(app_name, volume_id, request, opts)
      data
    end

    # Extend Volume
    # Extend a volume&#39;s size within an app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param request [ExtendVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtendVolumeResponse, Integer, Hash)>] ExtendVolumeResponse data, response status code and response headers
    def volumes_extend_with_http_info(app_name, volume_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_extend ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_extend"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.volumes_extend"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling VolumesApi.volumes_extend"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}/extend'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExtendVolumeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_extend",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_extend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Volume
    # Retrieve details about a specific volume by its ID within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def volumes_get_by_id(app_name, volume_id, opts = {})
      data, _status_code, _headers = volumes_get_by_id_with_http_info(app_name, volume_id, opts)
      data
    end

    # Get Volume
    # Retrieve details about a specific volume by its ID within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def volumes_get_by_id_with_http_info(app_name, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_get_by_id ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_get_by_id"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.volumes_get_by_id"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_get_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Volumes
    # List all volumes associated with a specific app. 
    # @param app_name [String] Fly App Name
    # @param [Hash] opts the optional parameters
    # @return [Array<Volume>]
    def volumes_list(app_name, opts = {})
      data, _status_code, _headers = volumes_list_with_http_info(app_name, opts)
      data
    end

    # List Volumes
    # List all volumes associated with a specific app. 
    # @param app_name [String] Fly App Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Volume>, Integer, Hash)>] Array<Volume> data, response status code and response headers
    def volumes_list_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_list ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_list"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Volume>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Snapshots
    # List all snapshots for a specific volume within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<VolumeSnapshot>]
    def volumes_list_snapshots(app_name, volume_id, opts = {})
      data, _status_code, _headers = volumes_list_snapshots_with_http_info(app_name, volume_id, opts)
      data
    end

    # List Snapshots
    # List all snapshots for a specific volume within an app. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VolumeSnapshot>, Integer, Hash)>] Array<VolumeSnapshot> data, response status code and response headers
    def volumes_list_snapshots_with_http_info(app_name, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_list_snapshots ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_list_snapshots"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.volumes_list_snapshots"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}/snapshots'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VolumeSnapshot>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_list_snapshots",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_list_snapshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Volume
    # Update a volume's configuration using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param request [UpdateVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def volumes_update(app_name, volume_id, request, opts = {})
      data, _status_code, _headers = volumes_update_with_http_info(app_name, volume_id, request, opts)
      data
    end

    # Update Volume
    # Update a volume&#39;s configuration using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param volume_id [String] Volume ID
    # @param request [UpdateVolumeRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def volumes_update_with_http_info(app_name, volume_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumesApi.volumes_update ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling VolumesApi.volumes_update"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling VolumesApi.volumes_update"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling VolumesApi.volumes_update"
      end
      # resource path
      local_var_path = '/apps/{app_name}/volumes/{volume_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VolumesApi.volumes_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumesApi#volumes_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
