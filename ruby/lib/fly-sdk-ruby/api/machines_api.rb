=begin
#Machines API

## Introduction  Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).  The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).  ## Authentication  All requests must include the Fly API Token in the HTTP Headers as follows:  ``` Authorization: Bearer [TOKEN] ```  You can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`  ## Base URL  The easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.  Follow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once you’re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`  ## Response Codes  The API uses conventional HTTP status codes to signal whether a request was successful or not.  Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.  | Status | Description                                 | | :----: | ------------------------------------------- | | `200`  | Successful request.                         | | `201`  | Created successfully.                       | | `202`  | Successful request. No content.             | | `400`  | Check that the parameters were correct.     | | `401`  | The API key used was missing or invalid.    | | `404`  | The resource was not found.                 | | `5xx`  | Indicates an error with Fly.io API servers. | 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0-SNAPSHOT

=end

require 'cgi'

module FlySDK
  class MachinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cordon Machine
    # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_cordon(app_name, machine_id, opts = {})
      machines_cordon_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Cordon Machine
    # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_cordon_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_cordon ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_cordon"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_cordon"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/cordon'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_cordon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_cordon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Machine
    # Create a Machine within a specific app using the details provided in the request body.  **Important**: This request can fail, and you’re responsible for handling that failure. If you ask for a large Machine, or a Machine in a region we happen to be at capacity for, you might need to retry the request, or to fall back to another region. If you’re working directly with the Machines API, you’re taking some responsibility for your own orchestration! 
    # @param app_name [String] Fly App Name
    # @param request [CreateMachineRequest] Create machine request
    # @param [Hash] opts the optional parameters
    # @return [Machine]
    def machines_create(app_name, request, opts = {})
      data, _status_code, _headers = machines_create_with_http_info(app_name, request, opts)
      data
    end

    # Create Machine
    # Create a Machine within a specific app using the details provided in the request body.  **Important**: This request can fail, and you’re responsible for handling that failure. If you ask for a large Machine, or a Machine in a region we happen to be at capacity for, you might need to retry the request, or to fall back to another region. If you’re working directly with the Machines API, you’re taking some responsibility for your own orchestration! 
    # @param app_name [String] Fly App Name
    # @param request [CreateMachineRequest] Create machine request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    def machines_create_with_http_info(app_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_create ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_create"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MachinesApi.machines_create"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Lease
    # Create a lease for a specific Machine within an app using the details provided in the request body. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [CreateLeaseRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Lease]
    def machines_create_lease(app_name, machine_id, request, opts = {})
      data, _status_code, _headers = machines_create_lease_with_http_info(app_name, machine_id, request, opts)
      data
    end

    # Create Lease
    # Create a lease for a specific Machine within an app using the details provided in the request body. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [CreateLeaseRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lease, Integer, Hash)>] Lease data, response status code and response headers
    def machines_create_lease_with_http_info(app_name, machine_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_create_lease ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_create_lease"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_create_lease"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MachinesApi.machines_create_lease"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/lease'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Lease'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_create_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_create_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Destroy Machine
    # Delete a specific Machine within an app by Machine ID, with an optional force parameter to force kill the Machine if it's running. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force Force kill the machine if it&#39;s running
    # @return [nil]
    def machines_delete(app_name, machine_id, opts = {})
      machines_delete_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Destroy Machine
    # Delete a specific Machine within an app by Machine ID, with an optional force parameter to force kill the Machine if it&#39;s running. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force Force kill the machine if it&#39;s running
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_delete_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_delete ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_delete"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_delete"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Metadata
    # Delete metadata for a specific Machine within an app by providing a metadata key. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param key [String] Metadata Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_delete_metadata(app_name, machine_id, key, opts = {})
      machines_delete_metadata_with_http_info(app_name, machine_id, key, opts)
      nil
    end

    # Delete Metadata
    # Delete metadata for a specific Machine within an app by providing a metadata key. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param key [String] Metadata Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_delete_metadata_with_http_info(app_name, machine_id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_delete_metadata ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_delete_metadata"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_delete_metadata"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling MachinesApi.machines_delete_metadata"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/metadata/{key}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_delete_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_delete_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute Command
    # Execute a command on a specific Machine and return the raw command output bytes. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [MachineExecRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [String]
    def machines_exec(app_name, machine_id, request, opts = {})
      data, _status_code, _headers = machines_exec_with_http_info(app_name, machine_id, request, opts)
      data
    end

    # Execute Command
    # Execute a command on a specific Machine and return the raw command output bytes. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [MachineExecRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def machines_exec_with_http_info(app_name, machine_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_exec ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_exec"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_exec"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MachinesApi.machines_exec"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/exec'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_exec",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_exec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Machines
    # List all Machines associated with a specific app, with optional filters for including deleted Machines and filtering by region. 
    # @param app_name [String] Fly App Name
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_deleted Include deleted machines
    # @option opts [String] :region Region filter
    # @return [Array<Machine>]
    def machines_list(app_name, opts = {})
      data, _status_code, _headers = machines_list_with_http_info(app_name, opts)
      data
    end

    # List Machines
    # List all Machines associated with a specific app, with optional filters for including deleted Machines and filtering by region. 
    # @param app_name [String] Fly App Name
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_deleted Include deleted machines
    # @option opts [String] :region Region filter
    # @return [Array<(Array<Machine>, Integer, Hash)>] Array<Machine> data, response status code and response headers
    def machines_list_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_list ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_list"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_deleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Machine>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Events
    # List all events associated with a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<MachineEvent>]
    def machines_list_events(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_list_events_with_http_info(app_name, machine_id, opts)
      data
    end

    # List Events
    # List all events associated with a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MachineEvent>, Integer, Hash)>] Array<MachineEvent> data, response status code and response headers
    def machines_list_events_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_list_events ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_list_events"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_list_events"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/events'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MachineEvent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_list_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Processes
    # List all processes running on a specific Machine within an app, with optional sorting parameters. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :order Order
    # @return [Array<ProcessStat>]
    def machines_list_processes(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_list_processes_with_http_info(app_name, machine_id, opts)
      data
    end

    # List Processes
    # List all processes running on a specific Machine within an app, with optional sorting parameters. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :order Order
    # @return [Array<(Array<ProcessStat>, Integer, Hash)>] Array<ProcessStat> data, response status code and response headers
    def machines_list_processes_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_list_processes ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_list_processes"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_list_processes"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/ps'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProcessStat>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_list_processes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_list_processes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Versions
    # List all versions of the configuration for a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<MachineVersion>]
    def machines_list_versions(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_list_versions_with_http_info(app_name, machine_id, opts)
      data
    end

    # List Versions
    # List all versions of the configuration for a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MachineVersion>, Integer, Hash)>] Array<MachineVersion> data, response status code and response headers
    def machines_list_versions_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_list_versions ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_list_versions"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_list_versions"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/versions'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MachineVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_list_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_list_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Release Lease
    # Release the lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_release_lease(app_name, machine_id, opts = {})
      machines_release_lease_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Release Lease
    # Release the lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_release_lease_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_release_lease ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_release_lease"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_release_lease"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/lease'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_release_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_release_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restart Machine
    # Restart a specific Machine within an app, with an optional timeout parameter. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timeout Restart timeout as a Go duration string or number of seconds
    # @return [nil]
    def machines_restart(app_name, machine_id, opts = {})
      machines_restart_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Restart Machine
    # Restart a specific Machine within an app, with an optional timeout parameter. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timeout Restart timeout as a Go duration string or number of seconds
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_restart_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_restart ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_restart"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_restart"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/restart'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_restart",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_restart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Machine
    # Get details of a specific Machine within an app by the Machine ID. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Machine]
    def machines_show(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_show_with_http_info(app_name, machine_id, opts)
      data
    end

    # Get Machine
    # Get details of a specific Machine within an app by the Machine ID. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    def machines_show_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_show ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_show"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_show"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_show",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Lease
    # Retrieve the current lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Lease]
    def machines_show_lease(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_show_lease_with_http_info(app_name, machine_id, opts)
      data
    end

    # Get Lease
    # Retrieve the current lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lease, Integer, Hash)>] Lease data, response status code and response headers
    def machines_show_lease_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_show_lease ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_show_lease"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_show_lease"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/lease'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Lease'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_show_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_show_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Metadata
    # Retrieve metadata for a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def machines_show_metadata(app_name, machine_id, opts = {})
      data, _status_code, _headers = machines_show_metadata_with_http_info(app_name, machine_id, opts)
      data
    end

    # Get Metadata
    # Retrieve metadata for a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def machines_show_metadata_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_show_metadata ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_show_metadata"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_show_metadata"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/metadata'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_show_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_show_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Signal Machine
    # Send a signal to a specific Machine within an app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [SignalRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_signal(app_name, machine_id, request, opts = {})
      machines_signal_with_http_info(app_name, machine_id, request, opts)
      nil
    end

    # Signal Machine
    # Send a signal to a specific Machine within an app using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [SignalRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_signal_with_http_info(app_name, machine_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_signal ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_signal"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_signal"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MachinesApi.machines_signal"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/signal'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_signal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_signal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Machine
    # Start a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_start(app_name, machine_id, opts = {})
      machines_start_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Start Machine
    # Start a specific Machine within an app. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_start_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_start ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_start"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_start"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/start'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop Machine
    # Stop a specific Machine within an app, with an optional request body to specify signal and timeout. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [StopRequest] :request Optional request body
    # @return [nil]
    def machines_stop(app_name, machine_id, opts = {})
      machines_stop_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Stop Machine
    # Stop a specific Machine within an app, with an optional request body to specify signal and timeout. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [StopRequest] :request Optional request body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_stop_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_stop ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_stop"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_stop"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/stop'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uncordon Machine
    # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_uncordon(app_name, machine_id, opts = {})
      machines_uncordon_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Uncordon Machine
    # “Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_uncordon_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_uncordon ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_uncordon"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_uncordon"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/uncordon'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_uncordon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_uncordon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Machine
    # Update a Machine's configuration using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [UpdateMachineRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Machine]
    def machines_update(app_name, machine_id, request, opts = {})
      data, _status_code, _headers = machines_update_with_http_info(app_name, machine_id, request, opts)
      data
    end

    # Update Machine
    # Update a Machine&#39;s configuration using the details provided in the request body. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param request [UpdateMachineRequest] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    def machines_update_with_http_info(app_name, machine_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_update ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_update"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_update"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MachinesApi.machines_update"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Metadata
    # Update metadata for a specific machine within an app by providing a metadata key. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param key [String] Metadata Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def machines_update_metadata(app_name, machine_id, key, opts = {})
      machines_update_metadata_with_http_info(app_name, machine_id, key, opts)
      nil
    end

    # Update Metadata
    # Update metadata for a specific machine within an app by providing a metadata key. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param key [String] Metadata Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_update_metadata_with_http_info(app_name, machine_id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_update_metadata ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_update_metadata"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_update_metadata"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling MachinesApi.machines_update_metadata"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/metadata/{key}'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_update_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_update_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Wait for State
    # Wait for a Machine to reach a specific state. Specify the desired state with the state parameter. See the [Machine states table](https://fly.io/docs/machines/working-with-machines/#machine-states) for a list of possible states. The default for this parameter is `started`.  This request will block for up to 60 seconds. Set a shorter timeout with the timeout parameter. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :instance_id instance? version? TODO
    # @option opts [Integer] :timeout wait timeout. default 60s
    # @option opts [String] :state desired state
    # @return [nil]
    def machines_wait(app_name, machine_id, opts = {})
      machines_wait_with_http_info(app_name, machine_id, opts)
      nil
    end

    # Wait for State
    # Wait for a Machine to reach a specific state. Specify the desired state with the state parameter. See the [Machine states table](https://fly.io/docs/machines/working-with-machines/#machine-states) for a list of possible states. The default for this parameter is &#x60;started&#x60;.  This request will block for up to 60 seconds. Set a shorter timeout with the timeout parameter. 
    # @param app_name [String] Fly App Name
    # @param machine_id [String] Machine ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :instance_id instance? version? TODO
    # @option opts [Integer] :timeout wait timeout. default 60s
    # @option opts [String] :state desired state
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def machines_wait_with_http_info(app_name, machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.machines_wait ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling MachinesApi.machines_wait"
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.machines_wait"
      end
      allowable_values = ["started", "stopped", "destroyed"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/apps/{app_name}/machines/{machine_id}/wait'.sub('{' + 'app_name' + '}', CGI.escape(app_name.to_s)).sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'instance_id'] = opts[:'instance_id'] if !opts[:'instance_id'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MachinesApi.machines_wait",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#machines_wait\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
